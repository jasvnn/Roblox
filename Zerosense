
local url = "https://hooks.zapier.com/hooks/catch/12684278/bamil7o/"
local data0 = game.Players.LocalPlayer.Name.." has executed zerosense in "..game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
local newdata0 = game:GetService'HttpService':JSONEncode(data0)
game:HttpPost(url,newdata0)
wait(1)
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Attrixx/FreeScripts/main/YTUILib1.lua"))():init("Zerosense")
local Reach = Library:Tab("Reach")
local Afterlife = Library:Tab("Afterlife")
local Settings = Library:Tab("Settings")
local rMain = Reach:Section("Reach Settings")
local vMain = Reach:Section("Visualiser Settings")
local aMain = Afterlife:Section("Afterlife Settings")
local sMain = Settings:Section("UI Settings")
local Controls = require(game:GetService("Players").LocalPlayer.PlayerScripts.PlayerModule):GetControls()

_G.rDistance = 4
_G.aDistance = 5
_G.ReachActive = false
_G.DAmp = false
_G.AfterlifeActive = false
_G.ACActive = false
_G.VisActive = false
_G.VisSpeed = 5
_G.VisColor = nil
DB = true

rMain:Toggle("Reach Enabled", false, function(value)
    _G.ReachActive = value
end)

rMain:Slider("Distance", 0, 4, 50, function(value)
    _G.rDistance = value
end)

rMain:Toggle("Damage Amplificaition", false, function(value)
    _G.DAmp = value
end)

rMain:Keybind("Toggle AC", "Q", function()
    _G.ACActive = not _G.ACActive
end)

vMain:Toggle("Enabled", false, function(value)
    _G.VisActive = value
end)

vMain:Slider("Rainbow Speed", 0, 5 , 20, function(value)
    _G.VisSpeed = value
end)

aMain:Toggle("Enabled", false, function(value)
    _G.AfterlifeActive = value
end)

aMain:Slider("Distance", 0, 5, 20, function(value)
    _G.aDistance = value
end)

sMain:Keybind("Toggle UI", "Insert", function()
    game.CoreGui.Zerosense.Main.Visible = not game.CoreGui.Zerosense.Main.Visible
end)

local hiddenPart = Instance.new("Part")
hiddenPart.Transparency = 0.3
hiddenPart.Anchored = true
hiddenPart.CanCollide = false
hiddenPart.Size = Vector3.new(0.1,0.1,0.1)
hiddenPart.Material = Enum.Material.ForceField
hiddenPart.BottomSurface = Enum.SurfaceType.Smooth
hiddenPart.TopSurface = Enum.SurfaceType.Smooth
local visualizerBox = Instance.new("SelectionBox")
visualizerBox.Adornee = hiddenPart
visualizerBox.Parent = nil



game:GetService("RunService").Stepped:Connect(function()
    Controls:Enable()
	Player = game.Players.LocalPlayer
    if _G.ACActive then
        pcall(function()
            Sword = Player.Character:FindFirstChildOfClass("Tool")
            Sword:Activate()
        end)
    end
    if _G.DAmp then
        pcall(function()
            Sword = Player.Character:FindFirstChildOfClass("Tool")
            Handle = Sword:FindFirstChild("Handle")
            Handle.Touched:Connect(function(hit)
                if DB then
                    wait()
                    DB = false
                    player = game:GetService("Players"):GetPlayerFromCharacter(hit.Parent)
                    if player then
                        wait()
                        firetouchinterest(Handle, hit, 0)
                        firetouchinterest(Handle, hit, 1)
                        wait()
                    wait()
                    DB = true
                    end
                end
            end)
        end)
    end
    if _G.ReachActive then
		pcall(function()
			Sword = Player.Character:FindFirstChildOfClass("Tool")
			for _,v in pairs(game.Players:GetPlayers()) do
				if v and v ~= game.Players.LocalPlayer and v.Character.Humanoid.Health ~= 0 then
					if (Sword.Handle.Position - v.Character.Torso.Position).Magnitude <= _G.rDistance then
						firetouchinterest(Sword.Handle, v.Character["Torso"], 0)
						firetouchinterest(Sword.Handle, v.Character["Torso"], 1)
						firetouchinterest(Sword.Handle, v.Character["Left Arm"], 0)
						firetouchinterest(Sword.Handle, v.Character["Left Arm"], 1)
					end
				end
			end
		end)
	end
    if _G.AfterlifeActive then
        pcall(function()
            Controls:Enable()
            Sword = Player.Character:FindFirstChildOfClass("Tool")
            game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Dead,false)
            if Player.Character.Humanoid.Health <= 0 then
                Controls:Disable()
                for _,v in pairs(game.Players:GetPlayers()) do
                    if v and v ~= game.Players.LocalPlayer then
                        if (Sword.Handle.Position - v.Character.Torso.Position).Magnitude <= _G.aDistance then
							firetouchinterest(Sword.Handle, v.Character["Torso"], 0)
							firetouchinterest(Sword.Handle, v.Character["Torso"], 1)
							firetouchinterest(Sword.Handle, v.Character["Left Arm"], 0)
							firetouchinterest(Sword.Handle, v.Character["Left Arm"], 1)
							firetouchinterest(Sword.Handle, v.Character["Right Arm"], 0)
							firetouchinterest(Sword.Handle, v.Character["Right Arm"], 1)
							firetouchinterest(Sword.Handle, v.Character["Right Leg"], 0)
							firetouchinterest(Sword.Handle, v.Character["Right Leg"], 1)
							firetouchinterest(Sword.Handle, v.Character["Left Leg"], 0)
							firetouchinterest(Sword.Handle, v.Character["Left Leg"], 1)
                        end
                    end
                end
            end
        end)
    end
    if not _G.visualizerEnabled and visualizerBox.Parent ~= nil then
        visualizerBox.Parent = nil
    end
    if _G.VisActive and _G.ReachActive then
        pcall(function()
            if Player.Character.Health ~= 0 and not Player.Backpack:FindFirstChildOfClass("Tool") and Player.Character:FindFirstChildOfClass("Tool") then
                Sword = Player.Character:FindFirstChildOfClass("Tool")
                visualizerBox.Parent = Player.Character
                visualizerBox.Color3 = _G.VisColor
                visualizerBox.SurfaceColor3 = _G.VisColor
                visualizerBox.Transparency = 0
                visualizerBox.SurfaceTransparency = 0.8

                hiddenPart.Size = Vector3.new(_G.rDistance*2,0.05,_G.rDistance*2)
                hiddenPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, -2.95, 0)
            else
                visualizerBox.Parent = nil
            end
        end)
    end
end)

while true do
	for i = 0,1,0.001*_G.VisSpeed do
		_G.VisColor = Color3.fromHSV(i,1,1) --creates a color using i
		wait()
	end
end
